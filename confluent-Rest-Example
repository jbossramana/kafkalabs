Connectors:

List the connector plugins available on this worker

$ curl localhost:8083/connector-plugins | jq

Listing active connectors on a worker

$ curl localhost:8083/connectors

Restarting a connector
$ curl -X POST localhost:8083/connectors/local-file-sink/restart

Getting tasks for a connector
$ curl localhost:8083/connectors/local-file-sink/tasks | jq

Restarting a task
$ curl -X POST localhost:8083/connectors/local-file-sink/tasks/0/restart

Pausing a connector (useful if downtime is needed for the system the connector interacts with)
$ curl -X PUT localhost:8083/connectors/file-sink-mysql-foobar/pause

Resuming a connector
$ curl -X PUT localhost:8083/connectors/local-file-sink/resume

Updating connector configuration
$ curl -X PUT -H "Content-Type: application/json" --data '{"connector.class":"FileStreamSinkConnector","file":"test.sink.txt","tasks.max":"2","topics":"connect-test","name":"local-file-sink"}' localhost:8083/connectors/local-file-sink/config

Getting connector status
$ curl localhost:8083/connectors/local-file-sink/status | jq

Getting connector configuration
$ curl localhost:8083/connectors/local-file-sink | jq

Deleting a connector
$ curl -X DELETE localhost:8083/connectors/local-file-sink
(no response printed if success)


Schema-Registry
===============

http://localhost:8081/subjects
http://localhost:8081/subjects/avrotest-value/versions
http://localhost:8081/subjects/avrotest-value/versions/1
http://localhost:8081/schemas/types/

KSQL-DB
=======

curl -X "POST" "http://localhost:8088/ksql" -H "Accept: application/vnd.ksql.v1+json"  -d $'{
  "ksql": "LIST STREAMS;",  "streamsProperties": {}}' | jq

curl -X "POST" "http://localhost:8088/query"  -H "Accept: application/vnd.ksql.v1+json" -d $'{ "ksql": "SELECT * FROM READINGS EMIT CHANGES;", "streamsProperties": {} }'

Rest Proxy
=========

# Get a list of topics

$ curl "http://localhost:8082/topics" | jq
  ["__consumer_offsets","_schemas","avrotest","binarytest","jsontest"]


# Get info about one topic

$ curl "http://localhost:8082/topics/avrotest"
  {"name":"avrotest","configs":{},"partitions":[{"partition":0,"leader":0,"replicas":[{"broker":0,"leader":true,"in_sync":true}]}]}


# Get info about a topic's partitions

$ curl "http://localhost:8082/topics/avrotest/partitions"
  [{"partition":0,"leader":0,"replicas":[{"broker":0,"leader":true,"in_sync":true}]}]

Avro Producer and consumer using REST API
=========================================

Produce and Consume Avro Messages
---------------------------------


# Produce a message using Avro embedded data, including the schema which will
# be registered with schema registry and used to validate and serialize
# before storing the data in Kafka

1).  
curl -X POST -H "Content-Type: application/vnd.kafka.avro.v2+json" \
-H "Accept: application/vnd.kafka.v2+json" \
--data '{"value_schema": "{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}", "records": 
[{"value": {"name": "testUser"}}]}' \
"http://localhost:8082/topics/avrotest"


curl -X POST -H "Content-Type: application/vnd.kafka.avro.v2+json" \
-H "Accept: application/vnd.kafka.v2+json" \
--data '{"value_schema": "{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}, {\"name\": \"phone\", \"type\": \"string\", \"default\": \"1234567890\"}]}", "records": 
[{"value": {"name": "testUser2","phone": "1234567890"}}]}' \
"http://localhost:8082/topics/avrotest"


output:

# You should get the following response:
  {"offsets":[{"partition":0,"offset":0,"error_code":null,"error":null}],"key_schema_id":null,"value_schema_id":21}

# Produce a message with Avro key and value.
# Note that if you use Avro values you must also use Avro keys, but the schemas can differ


2). curl -X POST  -H "Content-Type: application/vnd.kafka.v2+json" \
      --data '{"name": "my_consumer_instance", "format": "avro", "auto.offset.reset": "earliest"}' \
      http://localhost:8082/consumers/my_avro_consumer

output:

  {"instance_id":"my_consumer_instance","base_uri":"http://localhost:8082/consumers/my_avro_consumer/instances/my_consumer_instance"}


3). curl -X POST -H "Content-Type: application/vnd.kafka.v2+json" --data '{"topics":["avrotest"]}' \
 http://localhost:8082/consumers/my_avro_consumer/instances/my_consumer_instance/subscription

output:
 # No content in response

4). curl -X GET -H "Accept: application/vnd.kafka.avro.v2+json" \
      http://localhost:8082/consumers/my_avro_consumer/instances/my_consumer_instance/records

output:
  
[{"key":null,"value":{"name":"testUser"},"partition":0,"offset":1,"topic":"avrotest"}]


5). curl -X DELETE -H "Content-Type: application/vnd.kafka.v2+json" \
      http://localhost:8082/consumers/my_avro_consumer/instances/my_consumer_instance

output:
# No content in response












